(a)

Code:
	val dataframe = spark.read.option("inferSchema", true).option("header", true).csv("./Data/titanic.csv")

	dataframe.createOrReplaceTempView("titanic")
	
	var average = dataframe.select(avg($"age")).head().getDouble(0)
	dataframe.filter($"age" > average).select("Name").distinct.show()

Output:
	+--------------------+
	|                Name|
	+--------------------+
	|"Watt, Mrs. James...|
	|Young, Miss. Mari...|
	|Goldsmith, Mrs. F...|
	|    Dimic, Mr. Jovan|
	|Harper, Mr. Henry...|
	|Reuchlin, Jonkhee...|
	|Hosono, Mr. Masabumi|
	| Partner, Mr. Austen|
	|Slemen, Mr. Richa...|
	|Potter, Mrs. Thom...|
	|Endres, Miss. Car...|
	|Nysveen, Mr. Joha...|
	|Dahl, Mr. Karl Ed...|
	|Frolicher-Stehli,...|
	| Icard, Miss. Amelie|
	|Foreman, Mr. Benj...|
	|Sinkkonen, Miss. ...|
	| Svensson, Mr. Johan|
	|Jenkin, Mr. Steph...|
	|    Ward, Miss. Anna|
	+--------------------+
	only showing top 20 rows

(b)
Code:
	val dataframe = spark.read.option("inferSchema", true).option("header", true).csv("./Data/titanic.csv")

	dataframe.createOrReplaceTempView("titanic")
	
	var names = spark.sql("SELECT DISTINCT name FROM titanic WHERE age > (SELECT AVG(age) FROM titanic)")

Output:
	+--------------------+
	|                name|
	+--------------------+
	|"Watt, Mrs. James...|
	|Young, Miss. Mari...|
	|Goldsmith, Mrs. F...|
	|    Dimic, Mr. Jovan|
	|Harper, Mr. Henry...|
	|Reuchlin, Jonkhee...|
	|Hosono, Mr. Masabumi|
	| Partner, Mr. Austen|
	|Slemen, Mr. Richa...|
	|Potter, Mrs. Thom...|
	|Endres, Miss. Car...|
	|Nysveen, Mr. Joha...|
	|Dahl, Mr. Karl Ed...|
	|Frolicher-Stehli,...|
	| Icard, Miss. Amelie|
	|Foreman, Mr. Benj...|
	|Sinkkonen, Miss. ...|
	| Svensson, Mr. Johan|
	|Jenkin, Mr. Steph...|
	|    Ward, Miss. Anna|
	+--------------------+
	only showing top 20 rows

(c)

(d)